"use client";
import CustomDataGrid from "@/components/shared/customDataGrid";
import CustomModal from "@/components/shared/customModal";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent } from "@/components/ui/dialog";
import CustomLoader from "@/components/ui/loader";
import { Separator } from "@/components/ui/separator";
import { useUserContext } from "@/contexts/userContext";
import { api } from "@/trpc/client";
import { TUniversity } from "@/types/university";
import { Tooltip } from "@mui/material";
import { GridActionsCellItem, GridColDef } from "@mui/x-data-grid";
import { DeleteIcon, EditIcon, PlusCircleIcon } from "lucide-react";
import { redirect } from "next/navigation";
import { useState } from "react";
import { toast } from "react-toastify";
import AddUser from "../../../../components/forms/university/create";
import UniversityCreate from "../../../../components/forms/university/update";

const UniversitySOP = () => {
  const user = useUserContext();
  const [createUniversity, setCreateUniversity] = useState(false);
  const [selected, setSelected] = useState<TUniversity | undefined>(undefined);
  const [deleted, setDeleted] = useState<string | undefined>(undefined);
  const { data: universityList2, isLoading: universityListLoading2 } =
    api.university.getOwnUniversityList.useQuery();
  const { data: questionData, isLoading: questionDataLoading } =
    api.question.getQuestions.useQuery("university");

  if (user.status === "LOADING") return <CustomLoader />;
  if (user.status === "UNAUTHENTICATED") redirect("/login");
  if (user.status === "AUTHENTICATED" && user.role !== "CLIENT") {
    return (
      <p className="text-warning">you are not authorized to view this page</p>
    );
  }
  const column: GridColDef[] = [
    {
      field: "system_id",
      headerName: "ID",
      width: 90,
      renderCell: ({ row }: { row: TUniversity }) => {
        return <p>NEER-{row.information.user.system_id}</p>;
      },
    },
    { field: "email", headerName: "Email", width: 150 },

    {
      field: "university_name",
      headerName: "University Name",
      width: 200,
      renderCell: ({ row }: { row: TUniversity }) => {
        return <p>{row.university_name}</p>;
      },
    },
    {
      field: "program_name",
      headerName: "Program Name",
      width: 200,
      renderCell: ({ row }: { row: TUniversity }) => {
        return <p>{row.program_name}</p>;
      },
    },
    {
      field: "edit",
      type: "actions",
      headerName: "Action",
      width: 150,
      cellClassName: "actions",
      getActions: ({ row }: { row: TUniversity }) => {
        return [
          <Tooltip
            title="Edit Your University Details"
            key={row.id}
            placement="top"
          >
            <GridActionsCellItem
              label="University"
              icon={<EditIcon className="text-primary" size={26} />}
              onClick={() => setSelected(row)}
              color="inherit"
            />
          </Tooltip>,
          <Tooltip
            title="Delete Your University Details"
            key={row.id}
            placement="top"
          >
            <Button
              className="h-8 w-8 p-1"
              variant="destructive"
              type="button"
              onClick={() => setDeleted(row.id)}
            >
              <DeleteIcon size={16} />
            </Button>
          </Tooltip>,
        ];
      },
    },
  ];
  const uniVersityMutation = api.university.deleteUniversity.useMutation();
  const utils = api.useContext();
  return (
    <main>
      <h1 className="text-3xl font-extrabold capitalize text-primary">
        University Statement Of Purpose
      </h1>
      <Separator className="mb-4 h-1 bg-gradient-to-r from-primary via-primary/50 to-popover" />
      <div className="flex w-full justify-end">
        <Button
          className="space-x-1"
          onClick={() => {
            setCreateUniversity(true);
          }}
        >
          <PlusCircleIcon /> <span>Add</span>
        </Button>
      </div>
      <CustomDataGrid
        columns={column}
        rows={universityList2 || []}
        loading={universityListLoading2}
      />

      <CustomModal
        open={createUniversity}
        onClose={() => setCreateUniversity(false)}
      >
        {!!questionData && (
          <AddUser
            questionData={questionData}
            setClose={() => setCreateUniversity(false)}
          />
        )}
      </CustomModal>
      <CustomModal open={!!selected} onClose={() => setSelected(undefined)}>
        {!!selected && !!questionData && (
          <UniversityCreate
            questionData={questionData}
            universityData={selected}
            setClose={() => setSelected(undefined)}
          />
        )}
      </CustomModal>
      {!!deleted && (
        <Dialog open={!!deleted} onOpenChange={() => setDeleted(undefined)}>
          <DialogContent className="w-[90vw] sm:w-[75vw] md:w-[35vw]">
            <h1 className="capitalize">
              are you sure you want delete this university?
            </h1>
            <div className="mt-4 flex justify-end gap-4">
              <Button
                onClick={() => {
                  const id = toast.loading("Deleting University");
                  uniVersityMutation.mutate(deleted, {
                    onSuccess: (val) => {
                      toast.update(id, {
                        render: "Deleted University Details",
                        type: "success",
                        isLoading: false,
                      });
                      utils.university.getOwnUniversityList.invalidate();
                      const timeOut = setTimeout(() => {
                        toast.dismiss(id);
                        setDeleted(undefined);
                      }, 1500);
                      return timeOut;
                    },
                    onError: (e) => {
                      toast.update(id, {
                        render: "Error!!! Something Went Wrong!",
                        type: "error",
                        isLoading: false,
                      });
                      const timeOut = setTimeout(() => {
                        toast.dismiss(id);
                        setDeleted(undefined);
                      }, 1500);
                      return timeOut;
                    },
                  });
                }}
                variant="destructive"
              >
                Delete
              </Button>
              <Button onClick={() => setDeleted(undefined)} variant="outline">
                Cancel
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      )}
      {/* {downloadCertificate && client && (
        <DownloadCertificate
          client={client}
          data={downloadCertificate}
          setClose={() => setDownloadCertificate(undefined)}
        />
      )} */}
    </main>
  );
};

export default UniversitySOP;
